{"version":3,"names":["throttle","BasePlugin","ServiceWorkerStore","IndexedDBStore","MetaDataStore","packageJson","GoldenRetriever","constructor","uppy","opts","addBlobToStores","file","isRemote","put","catch","err","log","removeBlobFromStores","delete","id","replaceBlobInStores","handleRestoreConfirmed","currentUploads","getState","resumeAll","Object","keys","forEach","uploadId","restore","setState","recoveredState","abortRestore","fileIDs","files","deleteBlobs","then","length","cancelAll","cleanup","handleComplete","_ref","successful","map","restoreBlobs","getFiles","Promise","all","loadFileBlobsFromServiceWorker","loadFileBlobsFromIndexedDB","resultingArrayOfObjects","blobs","onBlobsLoaded","type","title","defaultOptions","expires","serviceWorker","storeName","getID","indexedDB","saveFilesStateToLocalStorage","bind","leading","trailing","restoreState","savedState","load","savedPluginData","pluginData","getWaitingFiles","waitingFiles","progress","uploadStarted","getUploadingFiles","uploadingFiles","uploadIDs","uploadID","filesInUpload","fileID","getFile","filesToSave","fileToSaveEntries","entries","filesToSaveWithoutData","fromEntries","_ref2","fileInfo","isRestored","data","preview","emit","assign","save","resolve","list","numberOfFilesRecovered","obsoleteBlobs","updatedFiles","originalFile","push","cachedData","updatedFileData","isGhost","_this$ServiceWorkerSt","_this$ServiceWorkerSt2","_this$IndexedDBStore","install","on","uninstall","off","VERSION","version"],"sources":["index.js"],"sourcesContent":["import throttle from 'lodash/throttle.js'\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport ServiceWorkerStore from './ServiceWorkerStore.js'\nimport IndexedDBStore from './IndexedDBStore.js'\nimport MetaDataStore from './MetaDataStore.js'\n\nimport packageJson from '../package.json'\n\n/**\n * The GoldenRetriever plugin — restores selected files and resumes uploads\n * after a closed tab or a browser crash!\n *\n * Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:\n * https://uppy.io/blog/2017/07/golden-retriever/\n */\nexport default class GoldenRetriever extends BasePlugin {\n  static VERSION = packageJson.version\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'debugger'\n    this.id = this.opts.id || 'GoldenRetriever'\n    this.title = 'Golden Retriever'\n\n    const defaultOptions = {\n      expires: 24 * 60 * 60 * 1000, // 24 hours\n      serviceWorker: false,\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    this.MetaDataStore = new MetaDataStore({\n      expires: this.opts.expires,\n      storeName: uppy.getID(),\n    })\n    this.ServiceWorkerStore = null\n    if (this.opts.serviceWorker) {\n      this.ServiceWorkerStore = new ServiceWorkerStore({ storeName: uppy.getID() })\n    }\n    this.IndexedDBStore = new IndexedDBStore({\n      expires: this.opts.expires,\n      ...this.opts.indexedDB || {},\n      storeName: uppy.getID(),\n    })\n\n    this.saveFilesStateToLocalStorage = throttle(\n      this.saveFilesStateToLocalStorage.bind(this),\n      500,\n      { leading: true, trailing: true },\n    )\n    this.restoreState = this.restoreState.bind(this)\n    this.loadFileBlobsFromServiceWorker = this.loadFileBlobsFromServiceWorker.bind(this)\n    this.loadFileBlobsFromIndexedDB = this.loadFileBlobsFromIndexedDB.bind(this)\n    this.onBlobsLoaded = this.onBlobsLoaded.bind(this)\n  }\n\n  restoreState () {\n    const savedState = this.MetaDataStore.load()\n    if (savedState) {\n      this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage')\n      this.uppy.setState({\n        currentUploads: savedState.currentUploads || {},\n        files: savedState.files || {},\n        recoveredState: savedState,\n      })\n      this.savedPluginData = savedState.pluginData\n    }\n  }\n\n  /**\n   * Get file objects that are currently waiting: they've been selected,\n   * but aren't yet being uploaded.\n   */\n  getWaitingFiles () {\n    const waitingFiles = {}\n\n    this.uppy.getFiles().forEach((file) => {\n      if (!file.progress || !file.progress.uploadStarted) {\n        waitingFiles[file.id] = file\n      }\n    })\n\n    return waitingFiles\n  }\n\n  /**\n   * Get file objects that are currently being uploaded. If a file has finished\n   * uploading, but the other files in the same batch have not, the finished\n   * file is also returned.\n   */\n  getUploadingFiles () {\n    const uploadingFiles = {}\n\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      const uploadIDs = Object.keys(currentUploads)\n      uploadIDs.forEach((uploadID) => {\n        const filesInUpload = currentUploads[uploadID].fileIDs\n        filesInUpload.forEach((fileID) => {\n          uploadingFiles[fileID] = this.uppy.getFile(fileID)\n        })\n      })\n    }\n\n    return uploadingFiles\n  }\n\n  saveFilesStateToLocalStorage () {\n    const filesToSave = {\n      ...this.getWaitingFiles(),\n      ...this.getUploadingFiles(),\n    }\n    const fileToSaveEntries = Object.entries(filesToSave)\n\n    // If all files have been removed by the user, clear recovery state\n    if (fileToSaveEntries.length === 0) {\n      if (this.uppy.getState().recoveredState !== null) {\n        this.uppy.setState({ recoveredState: null })\n      }\n      MetaDataStore.cleanup(this.uppy.opts.id)\n      return\n    }\n\n    // We dont’t need to store file.data on local files, because the actual blob will be restored later,\n    // and we want to avoid having weird properties in the serialized object.\n    // Also adding file.isRestored to all files, since they will be restored from local storage\n    const filesToSaveWithoutData = Object.fromEntries(fileToSaveEntries.map(([id, fileInfo]) => [id, fileInfo.isRemote\n      ? {\n        ...fileInfo,\n        isRestored: true,\n      }\n      : {\n        ...fileInfo,\n        isRestored: true,\n        data: null,\n        preview: null,\n      },\n    ]))\n\n    const pluginData = {}\n    // TODO Find a better way to do this?\n    // Other plugins can attach a restore:get-data listener that receives this callback.\n    // Plugins can then use this callback (sync) to provide data to be stored.\n    this.uppy.emit('restore:get-data', (data) => {\n      Object.assign(pluginData, data)\n    })\n\n    const { currentUploads } = this.uppy.getState()\n\n    this.MetaDataStore.save({\n      currentUploads,\n      files: filesToSaveWithoutData,\n      pluginData,\n    })\n  }\n\n  loadFileBlobsFromServiceWorker () {\n    if (!this.ServiceWorkerStore) {\n      return Promise.resolve({})\n    }\n\n    return this.ServiceWorkerStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from Service Worker!`)\n        return blobs\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...')\n      return {}\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning')\n      this.uppy.log(err)\n      return {}\n    })\n  }\n\n  loadFileBlobsFromIndexedDB () {\n    return this.IndexedDBStore.list().then((blobs) => {\n      const numberOfFilesRecovered = Object.keys(blobs).length\n\n      if (numberOfFilesRecovered > 0) {\n        this.uppy.log(`[GoldenRetriever] Successfully recovered ${numberOfFilesRecovered} blobs from IndexedDB!`)\n        return blobs\n      }\n      this.uppy.log('[GoldenRetriever] No blobs found in IndexedDB')\n      return {}\n    }).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning')\n      this.uppy.log(err)\n      return {}\n    })\n  }\n\n  onBlobsLoaded (blobs) {\n    const obsoleteBlobs = []\n    const updatedFiles = { ...this.uppy.getState().files }\n\n    // Loop through blobs that we can restore, add blobs to file objects\n    Object.keys(blobs).forEach((fileID) => {\n      const originalFile = this.uppy.getFile(fileID)\n      if (!originalFile) {\n        obsoleteBlobs.push(fileID)\n        return\n      }\n\n      const cachedData = blobs[fileID]\n\n      const updatedFileData = {\n        data: cachedData,\n        isRestored: true,\n        isGhost: false,\n      }\n      updatedFiles[fileID] = { ...originalFile, ...updatedFileData }\n    })\n\n    // Loop through files that we can’t restore fully — we only have meta, not blobs,\n    // set .isGhost on them, also set isRestored to all files\n    Object.keys(updatedFiles).forEach((fileID) => {\n      if (updatedFiles[fileID].data === null) {\n        updatedFiles[fileID] = {\n          ...updatedFiles[fileID],\n          isGhost: true,\n        }\n      }\n    })\n\n    this.uppy.setState({\n      files: updatedFiles,\n    })\n\n    this.uppy.emit('restored', this.savedPluginData)\n\n    if (obsoleteBlobs.length) {\n      this.deleteBlobs(obsoleteBlobs).then(() => {\n        this.uppy.log(`[GoldenRetriever] Cleaned up ${obsoleteBlobs.length} old files`)\n      }).catch((err) => {\n        this.uppy.log(`[GoldenRetriever] Could not clean up ${obsoleteBlobs.length} old files`, 'warning')\n        this.uppy.log(err)\n      })\n    }\n  }\n\n  deleteBlobs (fileIDs) {\n    return Promise.all(fileIDs.map(id => this.ServiceWorkerStore?.delete(id) ?? this.IndexedDBStore?.delete(id)))\n  }\n\n  addBlobToStores = (file) => {\n    if (file.isRemote) return\n\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.put(file).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n\n    this.IndexedDBStore.put(file).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Could not store file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  removeBlobFromStores = (file) => {\n    if (this.ServiceWorkerStore) {\n      this.ServiceWorkerStore.delete(file.id).catch((err) => {\n        this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n        this.uppy.log(err)\n      })\n    }\n    this.IndexedDBStore.delete(file.id).catch((err) => {\n      this.uppy.log('[GoldenRetriever] Failed to remove file', 'warning')\n      this.uppy.log(err)\n    })\n  }\n\n  replaceBlobInStores = (file) => {\n    this.removeBlobFromStores(file)\n    this.addBlobToStores(file)\n  }\n\n  handleRestoreConfirmed = () => {\n    this.uppy.log('[GoldenRetriever] Restore confirmed, proceeding...')\n    // start all uploads again when file blobs are restored\n    const { currentUploads } = this.uppy.getState()\n    if (currentUploads) {\n      this.uppy.resumeAll()\n      Object.keys(currentUploads).forEach((uploadId) => {\n        this.uppy.restore(uploadId, currentUploads[uploadId])\n      })\n    }\n    this.uppy.setState({ recoveredState: null })\n  }\n\n  abortRestore = () => {\n    this.uppy.log('[GoldenRetriever] Aborting restore...')\n\n    const fileIDs = Object.keys(this.uppy.getState().files)\n    this.deleteBlobs(fileIDs).then(() => {\n      this.uppy.log(`[GoldenRetriever] Removed ${fileIDs.length} files`)\n    }).catch((err) => {\n      this.uppy.log(`[GoldenRetriever] Could not remove ${fileIDs.length} files`, 'warning')\n      this.uppy.log(err)\n    })\n\n    this.uppy.cancelAll()\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  handleComplete = ({ successful }) => {\n    const fileIDs = successful.map((file) => file.id)\n    this.deleteBlobs(fileIDs).then(() => {\n      this.uppy.log(`[GoldenRetriever] Removed ${successful.length} files that finished uploading`)\n    }).catch((err) => {\n      this.uppy.log(`[GoldenRetriever] Could not remove ${successful.length} files that finished uploading`, 'warning')\n      this.uppy.log(err)\n    })\n\n    this.uppy.setState({ recoveredState: null })\n    MetaDataStore.cleanup(this.uppy.opts.id)\n  }\n\n  restoreBlobs = () => {\n    if (this.uppy.getFiles().length > 0) {\n      Promise.all([\n        this.loadFileBlobsFromServiceWorker(),\n        this.loadFileBlobsFromIndexedDB(),\n      ]).then((resultingArrayOfObjects) => {\n        const blobs = { ...resultingArrayOfObjects[0], ...resultingArrayOfObjects[1] }\n        this.onBlobsLoaded(blobs)\n      })\n    } else {\n      this.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...')\n    }\n  }\n\n  install () {\n    this.restoreState()\n    this.restoreBlobs()\n\n    this.uppy.on('file-added', this.addBlobToStores)\n    this.uppy.on('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.on('file-removed', this.removeBlobFromStores)\n    // TODO: the `state-update` is bad practise. It fires on any state change in Uppy\n    // or any state change in any of the plugins. We should to able to only listen\n    // for the state changes we need, somehow.\n    this.uppy.on('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.on('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.on('restore-canceled', this.abortRestore)\n    this.uppy.on('complete', this.handleComplete)\n  }\n\n  uninstall () {\n    this.uppy.off('file-added', this.addBlobToStores)\n    this.uppy.off('file-editor:complete', this.replaceBlobInStores)\n    this.uppy.off('file-removed', this.removeBlobFromStores)\n    this.uppy.off('state-update', this.saveFilesStateToLocalStorage)\n    this.uppy.off('restore-confirmed', this.handleRestoreConfirmed)\n    this.uppy.off('restore-canceled', this.abortRestore)\n    this.uppy.off('complete', this.handleComplete)\n  }\n}\n"],"mappings":"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"}