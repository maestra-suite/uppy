{"version":3,"sources":["BasePlugin.js"],"names":["Translator","require","module","exports","BasePlugin","constructor","uppy","opts","getPluginState","plugins","getState","id","setPluginState","update","setState","setOptions","newOpts","i18nInit","translator","defaultLocale","locale","i18n","translate","bind","i18nArray","translateArray","addTarget","Error","install","uninstall","render","afterUpdate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,4BAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,UAAN,CAAiB;AAChCC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAmB;AAAA,QAAXA,IAAW;AAAXA,MAAAA,IAAW,GAAJ,EAAI;AAAA;;AAC5B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEDC,EAAAA,cAAc,GAAI;AAChB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKH,IAAL,CAAUI,QAAV,EAApB;AACA,WAAOD,OAAO,CAAC,KAAKE,EAAN,CAAP,IAAoB,EAA3B;AACD;;AAEDC,EAAAA,cAAc,CAAEC,MAAF,EAAU;AACtB,UAAM;AAAEJ,MAAAA;AAAF,QAAc,KAAKH,IAAL,CAAUI,QAAV,EAApB;AAEA,SAAKJ,IAAL,CAAUQ,QAAV,CAAmB;AACjBL,MAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEP,SAAC,KAAKE,EAAN,GAAW,EACT,GAAGF,OAAO,CAAC,KAAKE,EAAN,CADD;AAET,aAAGE;AAFM;AAFJ;AADQ,KAAnB;AASD;;AAEDE,EAAAA,UAAU,CAAEC,OAAF,EAAW;AACnB,SAAKT,IAAL,GAAY,EAAE,GAAG,KAAKA,IAAV;AAAgB,SAAGS;AAAnB,KAAZ;AACA,SAAKJ,cAAL,GAFmB,CAEG;;AACtB,SAAKK,QAAL;AACD;;AAEDA,EAAAA,QAAQ,GAAI;AACV,UAAMC,UAAU,GAAG,IAAIlB,UAAJ,CAAe,CAAC,KAAKmB,aAAN,EAAqB,KAAKb,IAAL,CAAUc,MAA/B,EAAuC,KAAKb,IAAL,CAAUa,MAAjD,CAAf,CAAnB;AACA,SAAKC,IAAL,GAAYH,UAAU,CAACI,SAAX,CAAqBC,IAArB,CAA0BL,UAA1B,CAAZ;AACA,SAAKM,SAAL,GAAiBN,UAAU,CAACO,cAAX,CAA0BF,IAA1B,CAA+BL,UAA/B,CAAjB;AACA,SAAKN,cAAL,GAJU,CAIY;AACvB;AAED;AACF;AACA;AACA;AACA;AACA;AAEE;;;AACAc,EAAAA,SAAS,GAAI;AACX,UAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACD,GAhD+B,CAkDhC;;;AACAC,EAAAA,OAAO,GAAI,CAAE,CAnDmB,CAqDhC;;;AACAC,EAAAA,SAAS,GAAI,CAAE;AAEf;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,GAAI;AACR,UAAM,IAAIH,KAAJ,CAAU,8DAAV,CAAN;AACD,GAhE+B,CAkEhC;;;AACAd,EAAAA,MAAM,GAAI,CAAE,CAnEoB,CAqEhC;AACA;;;AACAkB,EAAAA,WAAW,GAAI,CAAE;;AAvEe,CAAlC","sourcesContent":["/**\r\n * Core plugin logic that all plugins share.\r\n *\r\n * BasePlugin does not contain DOM rendering so it can be used for plugins\r\n * without a user interface.\r\n *\r\n * See `Plugin` for the extended version with Preact rendering for interfaces.\r\n */\r\n\r\nconst Translator = require('@uppy/utils/lib/Translator')\r\n\r\nmodule.exports = class BasePlugin {\r\n  constructor (uppy, opts = {}) {\r\n    this.uppy = uppy\r\n    this.opts = opts\r\n  }\r\n\r\n  getPluginState () {\r\n    const { plugins } = this.uppy.getState()\r\n    return plugins[this.id] || {}\r\n  }\r\n\r\n  setPluginState (update) {\r\n    const { plugins } = this.uppy.getState()\r\n\r\n    this.uppy.setState({\r\n      plugins: {\r\n        ...plugins,\r\n        [this.id]: {\r\n          ...plugins[this.id],\r\n          ...update,\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  setOptions (newOpts) {\r\n    this.opts = { ...this.opts, ...newOpts }\r\n    this.setPluginState() // so that UI re-renders with new options\r\n    this.i18nInit()\r\n  }\r\n\r\n  i18nInit () {\r\n    const translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale])\r\n    this.i18n = translator.translate.bind(translator)\r\n    this.i18nArray = translator.translateArray.bind(translator)\r\n    this.setPluginState() // so that UI re-renders and we see the updated locale\r\n  }\r\n\r\n  /**\r\n   * Extendable methods\r\n   * ==================\r\n   * These methods are here to serve as an overview of the extendable methods as well as\r\n   * making them not conditional in use, such as `if (this.afterUpdate)`.\r\n   */\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  addTarget () {\r\n    throw new Error('Extend the addTarget method to add your plugin to another plugin\\'s target')\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  install () {}\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  uninstall () {}\r\n\r\n  /**\r\n   * Called when plugin is mounted, whether in DOM or into another plugin.\r\n   * Needed because sometimes plugins are mounted separately/after `install`,\r\n   * so this.el and this.parent might not be available in `install`.\r\n   * This is the case with @uppy/react plugins, for example.\r\n   */\r\n  render () {\r\n    throw new Error('Extend the render method to add your plugin to a DOM element')\r\n  }\r\n\r\n  // eslint-disable-next-line class-methods-use-this\r\n  update () {}\r\n\r\n  // Called after every state update, after everything's mounted. Debounced.\r\n  // eslint-disable-next-line class-methods-use-this\r\n  afterUpdate () {}\r\n}\r\n"]}