{"version":3,"sources":["Restricter.js"],"names":["prettierBytes","require","match","defaultOptions","maxFileSize","minFileSize","maxTotalFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","requiredMetaFields","RestrictionError","Error","isRestriction","AggregateError","globalThis","constructor","errors","message","Restricter","getOpts","i18n","opts","restrictions","Array","isArray","TypeError","validate","file","files","length","smart_count","isCorrectFileType","some","type","includes","replace","extension","toLowerCase","slice","allowedFileTypesString","join","types","size","totalFilesSize","reduce","total","f","name","validateMinNumberOfFiles","Object","keys","getMissingRequiredMetaFields","error","fileName","own","prototype","hasOwnProperty","missingFields","field","call","meta","push","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable max-classes-per-file, class-methods-use-this */\r\n/* global AggregateError */\r\nconst prettierBytes = require('@transloadit/prettier-bytes')\r\nconst match = require('mime-match')\r\n\r\nconst defaultOptions = {\r\n  maxFileSize: null,\r\n  minFileSize: null,\r\n  maxTotalFileSize: null,\r\n  maxNumberOfFiles: null,\r\n  minNumberOfFiles: null,\r\n  allowedFileTypes: null,\r\n  requiredMetaFields: [],\r\n}\r\n\r\nclass RestrictionError extends Error {\r\n  isRestriction = true\r\n}\r\n\r\nif (typeof AggregateError === 'undefined') {\r\n  // eslint-disable-next-line no-global-assign\r\n  // TODO: remove this \"polyfill\" in the next major.\r\n  globalThis.AggregateError = class AggregateError extends Error {\r\n    constructor (errors, message) {\r\n      super(message)\r\n      this.errors = errors\r\n    }\r\n  }\r\n}\r\n\r\nclass Restricter {\r\n  constructor (getOpts, i18n) {\r\n    this.i18n = i18n\r\n    this.getOpts = () => {\r\n      const opts = getOpts()\r\n\r\n      if (opts.restrictions.allowedFileTypes != null\r\n          && !Array.isArray(opts.restrictions.allowedFileTypes)) {\r\n        throw new TypeError('`restrictions.allowedFileTypes` must be an array')\r\n      }\r\n      return opts\r\n    }\r\n  }\r\n\r\n  validate (file, files) {\r\n    const { maxFileSize, minFileSize, maxTotalFileSize, maxNumberOfFiles, allowedFileTypes } = this.getOpts().restrictions\r\n\r\n    if (maxNumberOfFiles && files.length + 1 > maxNumberOfFiles) {\r\n      throw new RestrictionError(`${this.i18n('youCanOnlyUploadX', { smart_count: maxNumberOfFiles })}`)\r\n    }\r\n\r\n    if (allowedFileTypes) {\r\n      const isCorrectFileType = allowedFileTypes.some((type) => {\r\n        // check if this is a mime-type\r\n        if (type.includes('/')) {\r\n          if (!file.type) return false\r\n          return match(file.type.replace(/;.*?$/, ''), type)\r\n        }\r\n\r\n        // otherwise this is likely an extension\r\n        if (type[0] === '.' && file.extension) {\r\n          return file.extension.toLowerCase() === type.slice(1).toLowerCase()\r\n        }\r\n        return false\r\n      })\r\n\r\n      if (!isCorrectFileType) {\r\n        const allowedFileTypesString = allowedFileTypes.join(', ')\r\n        throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', { types: allowedFileTypesString }))\r\n      }\r\n    }\r\n\r\n    // We can't check maxTotalFileSize if the size is unknown.\r\n    if (maxTotalFileSize && file.size != null) {\r\n      const totalFilesSize = files.reduce((total, f) => (total + f.size), file.size)\r\n\r\n      if (totalFilesSize > maxTotalFileSize) {\r\n        throw new RestrictionError(this.i18n('exceedsSize', {\r\n          size: prettierBytes(maxTotalFileSize),\r\n          file: file.name,\r\n        }))\r\n      }\r\n    }\r\n\r\n    // We can't check maxFileSize if the size is unknown.\r\n    if (maxFileSize && file.size != null && file.size > maxFileSize) {\r\n      throw new RestrictionError(this.i18n('exceedsSize', {\r\n        size: prettierBytes(maxFileSize),\r\n        file: file.name,\r\n      }))\r\n    }\r\n\r\n    // We can't check minFileSize if the size is unknown.\r\n    if (minFileSize && file.size != null && file.size < minFileSize) {\r\n      throw new RestrictionError(this.i18n('inferiorSize', {\r\n        size: prettierBytes(minFileSize),\r\n      }))\r\n    }\r\n  }\r\n\r\n  validateMinNumberOfFiles (files) {\r\n    const { minNumberOfFiles } = this.getOpts().restrictions\r\n    if (Object.keys(files).length < minNumberOfFiles) {\r\n      throw new RestrictionError(this.i18n('youHaveToAtLeastSelectX', { smart_count: minNumberOfFiles }))\r\n    }\r\n  }\r\n\r\n  getMissingRequiredMetaFields (file) {\r\n    const error = new RestrictionError(this.i18n('missingRequiredMetaFieldOnFile', { fileName: file.name }))\r\n    const { requiredMetaFields } = this.getOpts().restrictions\r\n    // TODO: migrate to Object.hasOwn in the next major.\r\n    const own = Object.prototype.hasOwnProperty\r\n    const missingFields = []\r\n\r\n    for (const field of requiredMetaFields) {\r\n      if (!own.call(file.meta, field) || file.meta[field] === '') {\r\n        missingFields.push(field)\r\n      }\r\n    }\r\n\r\n    return { missingFields, error }\r\n  }\r\n}\r\n\r\nmodule.exports = { Restricter, defaultOptions, RestrictionError }\r\n"]}