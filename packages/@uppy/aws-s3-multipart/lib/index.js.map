{"version":3,"sources":["index.js"],"names":["BasePlugin","require","Socket","Provider","RequestClient","EventTracker","emitSocketProgress","getSocketHost","RateLimitedQueue","MultipartUploader","firebase","default","auth","assertServerError","res","error","Error","message","Object","assign","removeMetaProperty","object","name","newFileObject","module","exports","AwsS3Multipart","constructor","uppy","opts","type","id","title","client","defaultOptions","timeout","limit","retryDelays","createMultipartUpload","bind","listParts","prepareUploadParts","abortMultipartUpload","completeMultipartUpload","upload","requests","uploaders","create","uploaderEvents","uploaderSockets","resetUploaderReferences","fileID","abort","really","remove","close","assertHost","method","companionUrl","file","metadata","keys","meta","forEach","key","toString","idToken","currentUser","getIdToken","post","filename","then","uploadId","encodeURIComponent","get","partNumbers","join","parts","uploadIdEnc","delete","uploadFile","Promise","resolve","reject","onStart","data","cFile","getFile","setFileState","s3Multipart","onProgress","bytesUploaded","bytesTotal","emit","uploader","onError","err","log","queuedRequest","done","onSuccess","result","uploadResp","body","uploadURL","location","onPartComplete","part","getChunkSize","run","isPaused","start","onFileRemove","removed","onCancelAll","onFilePause","pause","onPauseAll","onResumeAll","progress","uploadStarted","isRestored","uploadRemote","serverToken","connectToServerSocket","Client","remote","providerOptions","provider","url","protocol","size","token","catch","host","socket","target","autoOpen","send","onRetry","isOpen","onRetryAll","on","progressData","errData","open","fileIDs","length","promises","map","isRemote","all","cb","targetFileID","install","capabilities","getState","setState","resumableUploads","addUploader","uninstall","removeUploader","VERSION"],"mappings":"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","sourcesContent":["const BasePlugin = require('@uppy/core/lib/BasePlugin')\r\nconst { Socket, Provider, RequestClient } = require('@uppy/companion-client')\r\nconst EventTracker = require('@uppy/utils/lib/EventTracker')\r\nconst emitSocketProgress = require('@uppy/utils/lib/emitSocketProgress')\r\nconst getSocketHost = require('@uppy/utils/lib/getSocketHost')\r\nconst { RateLimitedQueue } = require('@uppy/utils/lib/RateLimitedQueue')\r\nconst MultipartUploader = require('./MultipartUploader')\r\nconst firebase = require('firebase/compat/app').default\r\nconst auth = firebase.auth()\r\n\r\nfunction assertServerError (res) {\r\n  if (res && res.error) {\r\n    const error = new Error(res.message)\r\n    Object.assign(error, res.error)\r\n    throw error\r\n  }\r\n  return res\r\n}\r\n\r\nfunction removeMetaProperty (object) {\r\n  if (!object) return false\r\n  // add more here?\r\n  const { name, ...newFileObject } = object\r\n  return newFileObject\r\n}\r\n\r\nmodule.exports = class AwsS3Multipart extends BasePlugin {\r\n  static VERSION = require('../package.json').version\r\n\r\n  constructor (uppy, opts) {\r\n    super(uppy, opts)\r\n    this.type = 'uploader'\r\n    this.id = this.opts.id || 'AwsS3Multipart'\r\n    this.title = 'AWS S3 Multipart'\r\n    this.client = new RequestClient(uppy, opts)\r\n\r\n    const defaultOptions = {\r\n      timeout: 30 * 1000,\r\n      limit: 0,\r\n      retryDelays: [0, 1000, 3000, 5000],\r\n      createMultipartUpload: this.createMultipartUpload.bind(this),\r\n      listParts: this.listParts.bind(this),\r\n      prepareUploadParts: this.prepareUploadParts.bind(this),\r\n      abortMultipartUpload: this.abortMultipartUpload.bind(this),\r\n      completeMultipartUpload: this.completeMultipartUpload.bind(this),\r\n    }\r\n\r\n    this.opts = { ...defaultOptions, ...opts }\r\n\r\n    this.upload = this.upload.bind(this)\r\n\r\n    this.requests = new RateLimitedQueue(this.opts.limit)\r\n\r\n    this.uploaders = Object.create(null)\r\n    this.uploaderEvents = Object.create(null)\r\n    this.uploaderSockets = Object.create(null)\r\n  }\r\n\r\n  /**\r\n   * Clean up all references for a file's upload: the MultipartUploader instance,\r\n   * any events related to the file, and the Companion WebSocket connection.\r\n   *\r\n   * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.\r\n   * This should be done when the user cancels the upload, not when the upload is completed or errored.\r\n   */\r\n  resetUploaderReferences (fileID, opts = {}) {\r\n    if (this.uploaders[fileID]) {\r\n      this.uploaders[fileID].abort({ really: opts.abort || false })\r\n      this.uploaders[fileID] = null\r\n    }\r\n    if (this.uploaderEvents[fileID]) {\r\n      this.uploaderEvents[fileID].remove()\r\n      this.uploaderEvents[fileID] = null\r\n    }\r\n    if (this.uploaderSockets[fileID]) {\r\n      this.uploaderSockets[fileID].close()\r\n      this.uploaderSockets[fileID] = null\r\n    }\r\n  }\r\n\r\n  assertHost (method) {\r\n    if (!this.opts.companionUrl) {\r\n      throw new Error(`Expected a \\`companionUrl\\` option containing a Companion address, or if you are not using Companion, a custom \\`${method}\\` implementation.`)\r\n    }\r\n  }\r\n\r\n  async createMultipartUpload (file) {\r\n    this.assertHost('createMultipartUpload')\r\n\r\n    const metadata = {}\r\n\r\n    Object.keys(file.meta).forEach(key => {\r\n      if (file.meta[key] != null) {\r\n        metadata[key] = file.meta[key].toString()\r\n      }\r\n    })\r\n\r\n    const idToken = await auth.currentUser.getIdToken(true);\r\n    return this.client.post('s3/multipart', {\r\n      filename: file.name,\r\n      idToken,\r\n      type: file.type,\r\n      metadata: removeMetaProperty(metadata)\r\n    }).then(assertServerError)\r\n  }\r\n\r\n  listParts (file, { key, uploadId }) {\r\n    this.assertHost('listParts')\r\n\r\n    const filename = encodeURIComponent(key)\r\n    return this.client.get(`s3/multipart/${uploadId}?key=${filename}`)\r\n      .then(assertServerError)\r\n  }\r\n\r\n  prepareUploadParts (file, { key, uploadId, partNumbers }) {\r\n    this.assertHost('prepareUploadParts')\r\n\r\n    const filename = encodeURIComponent(key)\r\n    return this.client.get(`s3/multipart/${uploadId}/batch?key=${filename}&partNumbers=${partNumbers.join(',')}`)\r\n      .then(assertServerError)\r\n  }\r\n\r\n  completeMultipartUpload (file, { key, uploadId, parts }) {\r\n    this.assertHost('completeMultipartUpload')\r\n\r\n    const filename = encodeURIComponent(key)\r\n    const uploadIdEnc = encodeURIComponent(uploadId)\r\n    return this.client.post(`s3/multipart/${uploadIdEnc}/complete?key=${filename}`, { parts })\r\n      .then(assertServerError)\r\n  }\r\n\r\n  abortMultipartUpload (file, { key, uploadId }) {\r\n    this.assertHost('abortMultipartUpload')\r\n\r\n    const filename = encodeURIComponent(key)\r\n    const uploadIdEnc = encodeURIComponent(uploadId)\r\n    return this.client.delete(`s3/multipart/${uploadIdEnc}?key=${filename}`)\r\n      .then(assertServerError)\r\n  }\r\n\r\n  uploadFile (file) {\r\n    return new Promise((resolve, reject) => {\r\n      const onStart = (data) => {\r\n        const cFile = this.uppy.getFile(file.id)\r\n        this.uppy.setFileState(file.id, {\r\n          s3Multipart: {\r\n            ...cFile.s3Multipart,\r\n            key: data.key,\r\n            uploadId: data.uploadId,\r\n          },\r\n        })\r\n      }\r\n\r\n      const onProgress = (bytesUploaded, bytesTotal) => {\r\n        this.uppy.emit('upload-progress', file, {\r\n          uploader: this,\r\n          bytesUploaded,\r\n          bytesTotal,\r\n        })\r\n      }\r\n\r\n      const onError = (err) => {\r\n        this.uppy.log(err)\r\n        this.uppy.emit('upload-error', file, err)\r\n\r\n        queuedRequest.done()\r\n        this.resetUploaderReferences(file.id)\r\n        reject(err)\r\n      }\r\n\r\n      const onSuccess = (result) => {\r\n        const uploadResp = {\r\n          body: {\r\n            ...result,\r\n          },\r\n          uploadURL: result.location,\r\n        }\r\n\r\n        queuedRequest.done()\r\n        this.resetUploaderReferences(file.id)\r\n\r\n        const cFile = this.uppy.getFile(file.id)\r\n        this.uppy.emit('upload-success', cFile || file, uploadResp)\r\n\r\n        if (result.location) {\r\n          this.uppy.log(`Download ${upload.file.name} from ${result.location}`)\r\n        }\r\n\r\n        resolve(upload)\r\n      }\r\n\r\n      const onPartComplete = (part) => {\r\n        const cFile = this.uppy.getFile(file.id)\r\n        if (!cFile) {\r\n          return\r\n        }\r\n\r\n        this.uppy.emit('s3-multipart:part-uploaded', cFile, part)\r\n      }\r\n\r\n      const upload = new MultipartUploader(file.data, {\r\n        // .bind to pass the file object to each handler.\r\n        createMultipartUpload: this.opts.createMultipartUpload.bind(this, file),\r\n        listParts: this.opts.listParts.bind(this, file),\r\n        prepareUploadParts: this.opts.prepareUploadParts.bind(this, file),\r\n        completeMultipartUpload: this.opts.completeMultipartUpload.bind(this, file),\r\n        abortMultipartUpload: this.opts.abortMultipartUpload.bind(this, file),\r\n        getChunkSize: this.opts.getChunkSize ? this.opts.getChunkSize.bind(this) : null,\r\n\r\n        onStart,\r\n        onProgress,\r\n        onError,\r\n        onSuccess,\r\n        onPartComplete,\r\n\r\n        limit: this.opts.limit || 5,\r\n        retryDelays: this.opts.retryDelays || [],\r\n        ...file.s3Multipart,\r\n      })\r\n\r\n      this.uploaders[file.id] = upload\r\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\r\n\r\n      let queuedRequest = this.requests.run(() => {\r\n        if (!file.isPaused) {\r\n          upload.start()\r\n        }\r\n        // Don't do anything here, the caller will take care of cancelling the upload itself\r\n        // using resetUploaderReferences(). This is because resetUploaderReferences() has to be\r\n        // called when this request is still in the queue, and has not been started yet, too. At\r\n        // that point this cancellation function is not going to be called.\r\n        return () => {}\r\n      })\r\n\r\n      this.onFileRemove(file.id, (removed) => {\r\n        queuedRequest.abort()\r\n        this.resetUploaderReferences(file.id, { abort: true })\r\n        resolve(`upload ${removed.id} was removed`)\r\n      })\r\n\r\n      this.onCancelAll(file.id, () => {\r\n        queuedRequest.abort()\r\n        this.resetUploaderReferences(file.id, { abort: true })\r\n        resolve(`upload ${file.id} was canceled`)\r\n      })\r\n\r\n      this.onFilePause(file.id, (isPaused) => {\r\n        if (isPaused) {\r\n          // Remove this file from the queue so another file can start in its place.\r\n          queuedRequest.abort()\r\n          upload.pause()\r\n        } else {\r\n          // Resuming an upload should be queued, else you could pause and then\r\n          // resume a queued upload to make it skip the queue.\r\n          queuedRequest.abort()\r\n          queuedRequest = this.requests.run(() => {\r\n            upload.start()\r\n            return () => {}\r\n          })\r\n        }\r\n      })\r\n\r\n      this.onPauseAll(file.id, () => {\r\n        queuedRequest.abort()\r\n        upload.pause()\r\n      })\r\n\r\n      this.onResumeAll(file.id, () => {\r\n        queuedRequest.abort()\r\n        if (file.error) {\r\n          upload.abort()\r\n        }\r\n        queuedRequest = this.requests.run(() => {\r\n          upload.start()\r\n          return () => {}\r\n        })\r\n      })\r\n\r\n      // Don't double-emit upload-started for Golden Retriever-restored files that were already started\r\n      if (!file.progress.uploadStarted || !file.isRestored) {\r\n        this.uppy.emit('upload-started', file)\r\n      }\r\n    })\r\n  }\r\n\r\n  uploadRemote (file) {\r\n    this.resetUploaderReferences(file.id)\r\n\r\n    // Don't double-emit upload-started for Golden Retriever-restored files that were already started\r\n    if (!file.progress.uploadStarted || !file.isRestored) {\r\n      this.uppy.emit('upload-started', file)\r\n    }\r\n\r\n    if (file.serverToken) {\r\n      return this.connectToServerSocket(file)\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const Client = file.remote.providerOptions.provider ? Provider : RequestClient\r\n      const client = new Client(this.uppy, file.remote.providerOptions)\r\n      client.post(\r\n        file.remote.url,\r\n        {\r\n          ...file.remote.body,\r\n          protocol: 's3-multipart',\r\n          size: file.data.size,\r\n          metadata: removeMetaProperty(file.meta)\r\n        }\r\n      ).then((res) => {\r\n        this.uppy.setFileState(file.id, { serverToken: res.token })\r\n        file = this.uppy.getFile(file.id)\r\n        return file\r\n      }).then((file) => {\r\n        return this.connectToServerSocket(file)\r\n      }).then(() => {\r\n        resolve()\r\n      }).catch((err) => {\r\n        this.uppy.emit('upload-error', file, err)\r\n        reject(err)\r\n      })\r\n    })\r\n  }\r\n\r\n  connectToServerSocket (file) {\r\n    return new Promise((resolve, reject) => {\r\n      const token = file.serverToken\r\n      const host = getSocketHost(file.remote.companionUrl)\r\n      const socket = new Socket({ target: `${host}/api/${token}`, autoOpen: false })\r\n      this.uploaderSockets[file.id] = socket\r\n      this.uploaderEvents[file.id] = new EventTracker(this.uppy)\r\n\r\n      this.onFileRemove(file.id, () => {\r\n        queuedRequest.abort()\r\n        socket.send('cancel', {})\r\n        this.resetUploaderReferences(file.id, { abort: true })\r\n        resolve(`upload ${file.id} was removed`)\r\n      })\r\n\r\n      this.onFilePause(file.id, (isPaused) => {\r\n        if (isPaused) {\r\n          // Remove this file from the queue so another file can start in its place.\r\n          queuedRequest.abort()\r\n          socket.send('pause', {})\r\n        } else {\r\n          // Resuming an upload should be queued, else you could pause and then\r\n          // resume a queued upload to make it skip the queue.\r\n          queuedRequest.abort()\r\n          queuedRequest = this.requests.run(() => {\r\n            socket.send('resume', {})\r\n            return () => {}\r\n          })\r\n        }\r\n      })\r\n\r\n      this.onPauseAll(file.id, () => {\r\n        queuedRequest.abort()\r\n        socket.send('pause', {})\r\n      })\r\n\r\n      this.onCancelAll(file.id, () => {\r\n        queuedRequest.abort()\r\n        socket.send('cancel', {})\r\n        this.resetUploaderReferences(file.id)\r\n        resolve(`upload ${file.id} was canceled`)\r\n      })\r\n\r\n      this.onResumeAll(file.id, () => {\r\n        queuedRequest.abort()\r\n        if (file.error) {\r\n          socket.send('pause', {})\r\n        }\r\n        queuedRequest = this.requests.run(() => {\r\n          socket.send('resume', {})\r\n        })\r\n      })\r\n\r\n      this.onRetry(file.id, () => {\r\n        // Only do the retry if the upload is actually in progress;\r\n        // else we could try to send these messages when the upload is still queued.\r\n        // We may need a better check for this since the socket may also be closed\r\n        // for other reasons, like network failures.\r\n        if (socket.isOpen) {\r\n          socket.send('pause', {})\r\n          socket.send('resume', {})\r\n        }\r\n      })\r\n\r\n      this.onRetryAll(file.id, () => {\r\n        if (socket.isOpen) {\r\n          socket.send('pause', {})\r\n          socket.send('resume', {})\r\n        }\r\n      })\r\n\r\n      socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\r\n\r\n      socket.on('error', (errData) => {\r\n        this.uppy.emit('upload-error', file, new Error(errData.error))\r\n        this.resetUploaderReferences(file.id)\r\n        queuedRequest.done()\r\n        reject(new Error(errData.error))\r\n      })\r\n\r\n      socket.on('success', (data) => {\r\n        const uploadResp = {\r\n          uploadURL: data.url,\r\n        }\r\n\r\n        this.uppy.emit('upload-success', file, uploadResp)\r\n        this.resetUploaderReferences(file.id)\r\n        queuedRequest.done()\r\n        resolve()\r\n      })\r\n\r\n      let queuedRequest = this.requests.run(() => {\r\n        socket.open()\r\n        if (file.isPaused) {\r\n          socket.send('pause', {})\r\n        }\r\n\r\n        return () => {}\r\n      })\r\n    })\r\n  }\r\n\r\n  upload (fileIDs) {\r\n    if (fileIDs.length === 0) return Promise.resolve()\r\n\r\n    const promises = fileIDs.map((id) => {\r\n      const file = this.uppy.getFile(id)\r\n      if (file.isRemote) {\r\n        return this.uploadRemote(file)\r\n      }\r\n      return this.uploadFile(file)\r\n    })\r\n\r\n    return Promise.all(promises)\r\n  }\r\n\r\n  onFileRemove (fileID, cb) {\r\n    this.uploaderEvents[fileID].on('file-removed', (file) => {\r\n      if (fileID === file.id) cb(file.id)\r\n    })\r\n  }\r\n\r\n  onFilePause (fileID, cb) {\r\n    this.uploaderEvents[fileID].on('upload-pause', (targetFileID, isPaused) => {\r\n      if (fileID === targetFileID) {\r\n        // const isPaused = this.uppy.pauseResume(fileID)\r\n        cb(isPaused)\r\n      }\r\n    })\r\n  }\r\n\r\n  onRetry (fileID, cb) {\r\n    this.uploaderEvents[fileID].on('upload-retry', (targetFileID) => {\r\n      if (fileID === targetFileID) {\r\n        cb()\r\n      }\r\n    })\r\n  }\r\n\r\n  onRetryAll (fileID, cb) {\r\n    this.uploaderEvents[fileID].on('retry-all', () => {\r\n      if (!this.uppy.getFile(fileID)) return\r\n      cb()\r\n    })\r\n  }\r\n\r\n  onPauseAll (fileID, cb) {\r\n    this.uploaderEvents[fileID].on('pause-all', () => {\r\n      if (!this.uppy.getFile(fileID)) return\r\n      cb()\r\n    })\r\n  }\r\n\r\n  onCancelAll (fileID, cb) {\r\n    this.uploaderEvents[fileID].on('cancel-all', () => {\r\n      if (!this.uppy.getFile(fileID)) return\r\n      cb()\r\n    })\r\n  }\r\n\r\n  onResumeAll (fileID, cb) {\r\n    this.uploaderEvents[fileID].on('resume-all', () => {\r\n      if (!this.uppy.getFile(fileID)) return\r\n      cb()\r\n    })\r\n  }\r\n\r\n  install () {\r\n    const { capabilities } = this.uppy.getState()\r\n    this.uppy.setState({\r\n      capabilities: {\r\n        ...capabilities,\r\n        resumableUploads: true,\r\n      },\r\n    })\r\n    this.uppy.addUploader(this.upload)\r\n  }\r\n\r\n  uninstall () {\r\n    const { capabilities } = this.uppy.getState()\r\n    this.uppy.setState({\r\n      capabilities: {\r\n        ...capabilities,\r\n        resumableUploads: false,\r\n      },\r\n    })\r\n    this.uppy.removeUploader(this.upload)\r\n  }\r\n}\r\n"]}