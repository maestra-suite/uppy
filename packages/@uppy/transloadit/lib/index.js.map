{"version":3,"names":["hasProperty","ErrorWithCause","RateLimitedQueue","BasePlugin","Tus","Assembly","Client","AssemblyOptions","validateParams","AssemblyWatcher","locale","packageJson","sendErrorToConsole","originalErr","err","error","cause","console","COMPANION_URL","COMPANION_ALLOWED_HOSTS","TL_COMPANION","_rateLimitedQueue","_classPrivateFieldLooseKey","_getClientVersion","_attachAssemblyMetadata","_createAssembly","_createAssemblyWatcher","_shouldWaitAfterUpload","_reserveFiles","_onFileUploadURLAvailable","_findFile","_onFileUploadComplete","_onResult","_onAssemblyFinished","_cancelAssembly","_onCancelAll","_getPersistentData","_onRestored","_connectAssembly","_prepareUpload","_afterUpload","_closeAssemblyIfExists","_onError","_onTusError","Transloadit","constructor","uppy","opts","_this","_this$opts","_this$opts$assemblyOp","_this$opts$getAssembl","this","Object","defineProperty","value","_connectAssembly2","_cancelAssembly2","_onAssemblyFinished2","_onResult2","_onFileUploadComplete2","_findFile2","_reserveFiles2","_shouldWaitAfterUpload2","_createAssemblyWatcher2","_createAssembly2","_attachAssemblyMetadata2","_getClientVersion2","writable","rawFile","_file$transloadit","file","getFile","id","transloadit","assembly","assemblies","getPluginState","client","addFile","catch","log","emit","_temp","reason","uploadsAssemblies","assemblyIDs","values","flat","map","assemblyID","getAssembly","Promise","all","_classPrivateFieldLooseBase","setData","pluginData","savedState","previousAssemblies","keys","length","restoreState","files","results","status","entries","uploads","forEach","uploadedFile","state","stepName","result","original_id","localId","push","setPluginState","restoreAssemblies","uploadID","allAssemblyIDs","updateAssemblies","activeAssemblies","update","restored","resolve","then","fileIDs","filesWithoutErrors","filter","mode","message","i18n","createAssembly","_ref","options","importFromUploadURLs","fileID","assemblyOptions","build","maybeCreatedAssemblies","createdAssemblies","Boolean","assembly_id","filteredFileIDs","closeSocketConnections","close","addResultData","incompleteFiles","completedFiles","watcher","assemblyWatchers","promise","_this$activeAssemblie","submitError","_file$transloadit2","_err$message","startsWith","_err$originalRequest","endpoint","originalRequest","getUnderlyingObject","responseURL","type","title","defaultLocale","defaultOptions","service","errorReporting","waitForEncoding","waitForMetadata","alwaysRunAssembly","signature","params","fields","getAssemblyOptions","limit","retryDelays","i18nInit","rateLimitedQueue","create","install","addPreProcessor","addPostProcessor","on","use","storeFingerprintForResuming","allowedMetaFields","capabilities","getState","setState","individualCancellation","uninstall","removePreProcessor","removePostProcessor","off","getAssemblyFiles","getFiles","_file$transloadit3","list","VERSION","addPluginVersion","pluginName","versionName","plugin","getPlugin","join","meta","assembly_url","filename","name","fieldname","tus","tus_url","addRequestId","remote","test","companionUrl","newHost","companion_url","replace","path","url","newFile","assign","expectedFiles","newAssembly","_ref2","includes","cancelAssembly","updateNumberOfFilesInAssembly","updatedFiles","fileRemovedHandler","fileRemoved","_assembly$status","ok","nbOfRemainingFiles","wrapped","details","filesFromAssembly","reserveFile","i","uploadURL","tus_upload_url","uploadUrl","is_tus_file","size","undefined","assemblyId","entry","assembly_ssl_url","getAssemblyStatus","finalStatus","newStatus","progress_combined","connect","version","COMPANION","COMPANION_PATTERN"],"sources":["index.js"],"sourcesContent":["import hasProperty from '@uppy/utils/lib/hasProperty'\nimport ErrorWithCause from '@uppy/utils/lib/ErrorWithCause'\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue'\nimport BasePlugin from '@uppy/core/lib/BasePlugin.js'\nimport Tus from '@uppy/tus'\nimport Assembly from './Assembly.js'\nimport Client from './Client.js'\nimport AssemblyOptions, { validateParams } from './AssemblyOptions.js'\nimport AssemblyWatcher from './AssemblyWatcher.js'\n\nimport locale from './locale.js'\nimport packageJson from '../package.json'\n\nconst sendErrorToConsole = originalErr => err => {\n  const error = new ErrorWithCause('Failed to send error to the client', { cause: err })\n  // eslint-disable-next-line no-console\n  console.error(error, originalErr)\n}\n\nconst COMPANION_URL = 'https://api2.transloadit.com/companion'\n// Regex matching acceptable postMessage() origins for authentication feedback from companion.\nconst COMPANION_ALLOWED_HOSTS = /\\.transloadit\\.com$/\n// Regex used to check if a Companion address is run by Transloadit.\nconst TL_COMPANION = /https?:\\/\\/api2(?:-\\w+)?\\.transloadit\\.com\\/companion/\n\n/**\n * Upload files to Transloadit using Tus.\n */\nexport default class Transloadit extends BasePlugin {\n  static VERSION = packageJson.version\n\n  /** @deprecated use `import { COMPANION_URL } from '@uppy/transloadit'` instead. */\n  static COMPANION = COMPANION_URL\n\n  /** @deprecated use `import { COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit'` instead. */\n  static COMPANION_PATTERN = COMPANION_ALLOWED_HOSTS\n\n  #rateLimitedQueue\n\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = this.opts.id || 'Transloadit'\n    this.title = 'Transloadit'\n\n    this.defaultLocale = locale\n\n    const defaultOptions = {\n      service: 'https://api2.transloadit.com',\n      errorReporting: true,\n      waitForEncoding: false,\n      waitForMetadata: false,\n      alwaysRunAssembly: false,\n      importFromUploadURLs: false,\n      /** @deprecated use `assemblyOptions` instead */\n      signature: null,\n      /** @deprecated use `assemblyOptions` instead */\n      params: null,\n      /** @deprecated use `assemblyOptions` instead */\n      fields: null,\n      /** @deprecated use `assemblyOptions` instead */\n      getAssemblyOptions: null,\n      limit: 20,\n      retryDelays: [7_000, 10_000, 15_000, 20_000],\n    }\n\n    this.opts = { ...defaultOptions, ...opts }\n\n    // TODO: remove this fallback in the next major\n    this.opts.assemblyOptions ??= this.opts.getAssemblyOptions ?? {\n      params: this.opts.params,\n      signature: this.opts.signature,\n      fields: this.opts.fields,\n    }\n\n    // TODO: remove this check in the next major (validating params when creating the assembly should be enough)\n    if (opts?.params != null && opts.getAssemblyOptions == null && opts.assemblyOptions == null) {\n      validateParams(this.opts.assemblyOptions.params)\n    }\n\n    this.#rateLimitedQueue = new RateLimitedQueue(this.opts.limit)\n\n    this.i18nInit()\n\n    this.client = new Client({\n      service: this.opts.service,\n      client: this.#getClientVersion(),\n      errorReporting: this.opts.errorReporting,\n      rateLimitedQueue: this.#rateLimitedQueue,\n    })\n    // Contains Assembly instances for in-progress Assemblies.\n    this.activeAssemblies = {}\n    // Contains a mapping of uploadID to AssemblyWatcher\n    this.assemblyWatchers = {}\n    // Contains a file IDs that have completed postprocessing before the upload\n    // they belong to has entered the postprocess stage.\n    this.completedFiles = Object.create(null)\n  }\n\n  #getClientVersion () {\n    const list = [\n      `uppy-core:${this.uppy.constructor.VERSION}`,\n      `uppy-transloadit:${this.constructor.VERSION}`,\n      `uppy-tus:${Tus.VERSION}`,\n    ]\n\n    const addPluginVersion = (pluginName, versionName) => {\n      const plugin = this.uppy.getPlugin(pluginName)\n      if (plugin) {\n        list.push(`${versionName}:${plugin.constructor.VERSION}`)\n      }\n    }\n\n    if (this.opts.importFromUploadURLs) {\n      addPluginVersion('XHRUpload', 'uppy-xhr-upload')\n      addPluginVersion('AwsS3', 'uppy-aws-s3')\n      addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart')\n    }\n\n    addPluginVersion('Dropbox', 'uppy-dropbox')\n    addPluginVersion('Box', 'uppy-box')\n    addPluginVersion('Facebook', 'uppy-facebook')\n    addPluginVersion('GoogleDrive', 'uppy-google-drive')\n    addPluginVersion('Instagram', 'uppy-instagram')\n    addPluginVersion('OneDrive', 'uppy-onedrive')\n    addPluginVersion('Zoom', 'uppy-zoom')\n    addPluginVersion('Url', 'uppy-url')\n\n    return list.join(',')\n  }\n\n  /**\n   * Attach metadata to files to configure the Tus plugin to upload to Transloadit.\n   * Also use Transloadit's Companion\n   *\n   * See: https://github.com/tus/tusd/wiki/Uploading-to-Transloadit-using-tus#uploading-using-tus\n   *\n   * @param {object} file\n   * @param {object} status\n   */\n  #attachAssemblyMetadata (file, status) {\n    // Add the metadata parameters Transloadit needs.\n    const meta = {\n      ...file.meta,\n      assembly_url: status.assembly_url,\n      filename: file.name,\n      fieldname: 'file',\n    }\n    // Add Assembly-specific Tus endpoint.\n    const tus = {\n      ...file.tus,\n      endpoint: status.tus_url,\n      // Include X-Request-ID headers for better debugging.\n      addRequestId: true,\n    }\n\n    // Set Companion location. We only add this, if 'file' has the attribute\n    // remote, because this is the criteria to identify remote files.\n    // We only replace the hostname for Transloadit's companions, so that\n    // people can also self-host them while still using Transloadit for encoding.\n    let { remote } = file\n\n    if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {\n      const newHost = status.companion_url\n        .replace(/\\/$/, '')\n      const path = file.remote.url\n        .replace(file.remote.companionUrl, '')\n        .replace(/^\\//, '')\n\n      remote = {\n        ...file.remote,\n        companionUrl: newHost,\n        url: `${newHost}/${path}`,\n      }\n    }\n\n    // Store the Assembly ID this file is in on the file under the `transloadit` key.\n    const newFile = {\n      ...file,\n      transloadit: {\n        assembly: status.assembly_id,\n      },\n    }\n    // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).\n    if (!this.opts.importFromUploadURLs) {\n      Object.assign(newFile, { meta, tus, remote })\n    }\n    return newFile\n  }\n\n  #createAssembly (fileIDs, uploadID, assemblyOptions) {\n    this.uppy.log('[Transloadit] Create Assembly')\n\n    return this.client.createAssembly({\n      ...assemblyOptions,\n      expectedFiles: fileIDs.length,\n    }).then(async (newAssembly) => {\n      const files = this.uppy.getFiles().filter(({ id }) => fileIDs.includes(id))\n      if (files.length !== fileIDs.length) {\n        if (files.length === 0) {\n          // All files have been removed, cancelling.\n          await this.client.cancelAssembly(newAssembly)\n          return null\n        }\n        // At least one file has been removed.\n        await this.client.updateNumberOfFilesInAssembly(newAssembly, files.length)\n      }\n\n      const assembly = new Assembly(newAssembly, this.#rateLimitedQueue)\n      const { status } = assembly\n      const assemblyID = status.assembly_id\n\n      const { assemblies, uploadsAssemblies } = this.getPluginState()\n      this.setPluginState({\n        // Store the Assembly status.\n        assemblies: {\n          ...assemblies,\n          [assemblyID]: status,\n        },\n        // Store the list of Assemblies related to this upload.\n        uploadsAssemblies: {\n          ...uploadsAssemblies,\n          [uploadID]: [\n            ...uploadsAssemblies[uploadID],\n            assemblyID,\n          ],\n        },\n      })\n\n      const updatedFiles = {}\n      files.forEach((file) => {\n        updatedFiles[file.id] = this.#attachAssemblyMetadata(file, status)\n      })\n\n      this.uppy.setState({\n        files: {\n          ...this.uppy.getState().files,\n          ...updatedFiles,\n        },\n      })\n\n      // TODO: this should not live inside a `file-removed` event but somewhere more deterministic.\n      // Such as inside the function where the assembly has succeeded or cancelled.\n      // For the use case of cancelling the assembly when needed, we should try to do that with just `cancel-all`.\n      const fileRemovedHandler = (fileRemoved, reason) => {\n        // If the assembly has successfully completed, we do not need these checks.\n        // Otherwise we may cancel an assembly after it already succeeded\n        if (assembly.status?.ok === 'ASSEMBLY_COMPLETED') {\n          this.uppy.off('file-removed', fileRemovedHandler)\n          return\n        }\n        if (reason === 'cancel-all') {\n          assembly.close()\n          this.uppy.off('file-removed', fileRemovedHandler)\n        } else if (fileRemoved.id in updatedFiles) {\n          delete updatedFiles[fileRemoved.id]\n          const nbOfRemainingFiles = Object.keys(updatedFiles).length\n          if (nbOfRemainingFiles === 0) {\n            assembly.close()\n            this.#cancelAssembly(newAssembly).catch(() => { /* ignore potential errors */ })\n            this.uppy.off('file-removed', fileRemovedHandler)\n          } else {\n            this.client.updateNumberOfFilesInAssembly(newAssembly, nbOfRemainingFiles)\n              .catch(() => { /* ignore potential errors */ })\n          }\n        }\n      }\n      this.uppy.on('file-removed', fileRemovedHandler)\n\n      this.uppy.emit('transloadit:assembly-created', status, fileIDs)\n\n      this.uppy.log(`[Transloadit] Created Assembly ${assemblyID}`)\n      return assembly\n    }).catch((err) => {\n      const wrapped = new ErrorWithCause(`${this.i18n('creatingAssemblyFailed')}: ${err.message}`, { cause: err })\n      if ('details' in err) {\n        wrapped.details = err.details\n      }\n      if ('assembly' in err) {\n        wrapped.assembly = err.assembly\n      }\n      throw wrapped\n    })\n  }\n\n  #createAssemblyWatcher (assemblyID, uploadID) {\n  // AssemblyWatcher tracks completion states of all Assemblies in this upload.\n    const watcher = new AssemblyWatcher(this.uppy, assemblyID)\n\n    watcher.on('assembly-complete', (id) => {\n      const files = this.getAssemblyFiles(id)\n      files.forEach((file) => {\n        this.completedFiles[file.id] = true\n        this.uppy.emit('postprocess-complete', file)\n      })\n    })\n\n    watcher.on('assembly-error', (id, error) => {\n      // Clear postprocessing state for all our files.\n      const filesFromAssembly = this.getAssemblyFiles(id)\n      filesFromAssembly.forEach((file) => {\n        // TODO Maybe make a postprocess-error event here?\n\n        this.uppy.emit('upload-error', file, error)\n        this.uppy.emit('postprocess-complete', file)\n      })\n\n      // Reset `tus` key in the file state, so when the upload is retried,\n      // old tus upload is not re-used — Assebmly expects a new upload, can't currently\n      // re-use the old one. See: https://github.com/transloadit/uppy/issues/4412\n      // and `onReceiveUploadUrl` in @uppy/tus\n      const files = { ...this.uppy.getState().files }\n      filesFromAssembly.forEach(file => delete files[file.id].tus)\n      this.uppy.setState({ files })\n\n      this.uppy.emit('error', error)\n    })\n\n    this.assemblyWatchers[uploadID] = watcher\n  }\n\n  #shouldWaitAfterUpload () {\n    return this.opts.waitForEncoding || this.opts.waitForMetadata\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: reserves all files in\n   * the Assembly.\n   */\n  #reserveFiles (assembly, fileIDs) {\n    return Promise.all(fileIDs.map((fileID) => {\n      const file = this.uppy.getFile(fileID)\n      return this.client.reserveFile(assembly.status, file)\n    }))\n  }\n\n  /**\n   * Used when `importFromUploadURLs` is enabled: adds files to the Assembly\n   * once they have been fully uploaded.\n   */\n  #onFileUploadURLAvailable = (rawFile) => {\n    const file = this.uppy.getFile(rawFile.id)\n    if (!file?.transloadit?.assembly) {\n      return\n    }\n\n    const { assemblies } = this.getPluginState()\n    const assembly = assemblies[file.transloadit.assembly]\n\n    this.client.addFile(assembly, file).catch((err) => {\n      this.uppy.log(err)\n      this.uppy.emit('transloadit:import-error', assembly, file.id, err)\n    })\n  }\n\n  #findFile (uploadedFile) {\n    const files = this.uppy.getFiles()\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i]\n      // Completed file upload.\n      if (file.uploadURL === uploadedFile.tus_upload_url) {\n        return file\n      }\n      // In-progress file upload.\n      if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {\n        return file\n      }\n      if (!uploadedFile.is_tus_file) {\n        // Fingers-crossed check for non-tus uploads, eg imported from S3.\n        if (file.name === uploadedFile.name && file.size === uploadedFile.size) {\n          return file\n        }\n      }\n    }\n    return undefined\n  }\n\n  #onFileUploadComplete (assemblyId, uploadedFile) {\n    const state = this.getPluginState()\n    const file = this.#findFile(uploadedFile)\n    if (!file) {\n      this.uppy.log('[Transloadit] Couldn’t find the file, it was likely removed in the process')\n      return\n    }\n    this.setPluginState({\n      files: {\n        ...state.files,\n        [uploadedFile.id]: {\n          assembly: assemblyId,\n          id: file.id,\n          uploadedFile,\n        },\n      },\n    })\n    this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId))\n  }\n\n  /**\n   * Callback when a new Assembly result comes in.\n   *\n   * @param {string} assemblyId\n   * @param {string} stepName\n   * @param {object} result\n   */\n  #onResult (assemblyId, stepName, result) {\n    const state = this.getPluginState()\n    const file = state.files[result.original_id]\n    // The `file` may not exist if an import robot was used instead of a file upload.\n    result.localId = file ? file.id : null // eslint-disable-line no-param-reassign\n\n    const entry = {\n      result,\n      stepName,\n      id: result.id,\n      assembly: assemblyId,\n    }\n\n    this.setPluginState({\n      results: [...state.results, entry],\n    })\n    this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId))\n  }\n\n  /**\n   * When an Assembly has finished processing, get the final state\n   * and emit it.\n   *\n   * @param {object} status\n   */\n  #onAssemblyFinished (status) {\n    const url = status.assembly_ssl_url\n    this.client.getAssemblyStatus(url).then((finalStatus) => {\n      const assemblyId = finalStatus.assembly_id\n      const state = this.getPluginState()\n      this.setPluginState({\n        assemblies: {\n          ...state.assemblies,\n          [assemblyId]: finalStatus,\n        },\n      })\n      this.uppy.emit('transloadit:complete', finalStatus)\n    })\n  }\n\n  async #cancelAssembly (assembly) {\n    await this.client.cancelAssembly(assembly)\n    // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly\n    this.uppy.emit('transloadit:assembly-cancelled', assembly)\n  }\n\n  /**\n   * When all files are removed, cancel in-progress Assemblies.\n   */\n  #onCancelAll = async ({ reason } = {}) => {\n    try {\n      if (reason !== 'user') return\n\n      const { uploadsAssemblies } = this.getPluginState()\n      const assemblyIDs = Object.values(uploadsAssemblies).flat(1)\n      const assemblies = assemblyIDs.map((assemblyID) => this.getAssembly(assemblyID))\n\n      await Promise.all(assemblies.map((assembly) => this.#cancelAssembly(assembly)))\n    } catch (err) {\n      this.uppy.log(err)\n    }\n  }\n\n  /**\n   * Custom state serialization for the Golden Retriever plugin.\n   * It will pass this back to the `_onRestored` function.\n   *\n   * @param {Function} setData\n   */\n  #getPersistentData = (setData) => {\n    const { assemblies, uploadsAssemblies } = this.getPluginState()\n\n    setData({\n      [this.id]: {\n        assemblies,\n        uploadsAssemblies,\n      },\n    })\n  }\n\n  #onRestored = (pluginData) => {\n    const savedState = pluginData && pluginData[this.id] ? pluginData[this.id] : {}\n    const previousAssemblies = savedState.assemblies || {}\n    const uploadsAssemblies = savedState.uploadsAssemblies || {}\n\n    if (Object.keys(uploadsAssemblies).length === 0) {\n      // Nothing to restore.\n      return\n    }\n\n    // Convert loaded Assembly statuses to a Transloadit plugin state object.\n    const restoreState = (assemblies) => {\n      const files = {}\n      const results = []\n      for (const [id, status] of Object.entries(assemblies))  {\n        status.uploads.forEach((uploadedFile) => {\n          const file = this.#findFile(uploadedFile)\n          files[uploadedFile.id] = {\n            id: file.id,\n            assembly: id,\n            uploadedFile,\n          }\n        })\n\n        const state = this.getPluginState()\n        Object.keys(status.results).forEach((stepName) => {\n          for (const result of status.results[stepName]) {\n            const file = state.files[result.original_id]\n            result.localId = file ? file.id : null\n            results.push({\n              id: result.id,\n              result,\n              stepName,\n              assembly: id,\n            })\n          }\n        })\n      }\n\n      this.setPluginState({\n        assemblies,\n        files,\n        results,\n        uploadsAssemblies,\n      })\n    }\n\n    // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.\n    const restoreAssemblies = () => {\n      // eslint-disable-next-line no-shadow\n      const { assemblies, uploadsAssemblies } = this.getPluginState()\n\n      // Set up the assembly watchers again for all the ongoing uploads.\n      Object.keys(uploadsAssemblies).forEach((uploadID) => {\n        const assemblyIDs = uploadsAssemblies[uploadID]\n        this.#createAssemblyWatcher(assemblyIDs, uploadID)\n      })\n\n      const allAssemblyIDs = Object.keys(assemblies)\n      allAssemblyIDs.forEach((id) => {\n        const assembly = new Assembly(assemblies[id], this.#rateLimitedQueue)\n        this.#connectAssembly(assembly)\n      })\n    }\n\n    // Force-update all Assemblies to check for missed events.\n    const updateAssemblies = () => {\n      const { assemblies } = this.getPluginState()\n      return Promise.all(\n        Object.keys(assemblies).map((id) => {\n          return this.activeAssemblies[id].update()\n        }),\n      )\n    }\n\n    // Restore all Assembly state.\n    this.restored = Promise.resolve().then(() => {\n      restoreState(previousAssemblies)\n      restoreAssemblies()\n      return updateAssemblies()\n    })\n\n    this.restored.then(() => {\n      this.restored = null\n    })\n  }\n\n  #connectAssembly (assembly) {\n    const { status } = assembly\n    const id = status.assembly_id\n    this.activeAssemblies[id] = assembly\n\n    // Sync local `assemblies` state\n    assembly.on('status', (newStatus) => {\n      const { assemblies } = this.getPluginState()\n      this.setPluginState({\n        assemblies: {\n          ...assemblies,\n          [id]: newStatus,\n        },\n      })\n    })\n\n    assembly.on('upload', (file) => {\n      this.#onFileUploadComplete(id, file)\n    })\n    assembly.on('error', (error) => {\n      error.assembly = assembly.status // eslint-disable-line no-param-reassign\n      this.uppy.emit('transloadit:assembly-error', assembly.status, error)\n    })\n\n    assembly.on('executing', () => {\n      this.uppy.emit('transloadit:assembly-executing', assembly.status)\n    })\n\n    assembly.on('execution-progress', (details) => {\n      this.uppy.emit('transloadit:execution-progress', details)\n\n      if (details.progress_combined != null) {\n        // TODO: Transloadit emits progress information for the entire Assembly combined\n        // (progress_combined) and for each imported/uploaded file (progress_per_original_file).\n        // Uppy's current design requires progress to be set for each file, which is then\n        // averaged to get the total progress (see calculateProcessingProgress.js).\n        // Therefore, we currently set the combined progres for every file, so that this is\n        // the same value that is displayed to the end user, although we have more accurate\n        // per-file progress as well. We cannot use this here or otherwise progress from\n        // imported files would not be counted towards the total progress because imported\n        // files are not registered with Uppy.\n        for (const file of this.uppy.getFiles()) {\n          this.uppy.emit('postprocess-progress', file, {\n            mode: 'determinate',\n            value: details.progress_combined / 100,\n            message: this.i18n('encoding'),\n          })\n        }\n      }\n    })\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('result', (stepName, result) => {\n        this.#onResult(id, stepName, result)\n      })\n    }\n\n    if (this.opts.waitForEncoding) {\n      assembly.on('finished', () => {\n        this.#onAssemblyFinished(assembly.status)\n      })\n    } else if (this.opts.waitForMetadata) {\n      assembly.on('metadata', () => {\n        this.#onAssemblyFinished(assembly.status)\n      })\n    }\n\n    // No need to connect to the socket if the Assembly has completed by now.\n    if (assembly.ok === 'ASSEMBLY_COMPLETE') {\n      return assembly\n    }\n\n    assembly.connect()\n    return assembly\n  }\n\n  #prepareUpload = (fileIDs, uploadID) => {\n    const files = fileIDs.map(id => this.uppy.getFile(id))\n    const filesWithoutErrors = files.filter((file) => {\n      if (!file.error) {\n        this.uppy.emit('preprocess-progress', file, {\n          mode: 'indeterminate',\n          message: this.i18n('creatingAssembly'),\n        })\n        return true\n      }\n      return false\n    })\n\n    // eslint-disable-next-line no-shadow\n    const createAssembly = async ({ fileIDs, options }) => {\n      try {\n        const assembly = await this.#createAssembly(fileIDs, uploadID, options)\n        if (this.opts.importFromUploadURLs) {\n          await this.#reserveFiles(assembly, fileIDs)\n        }\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          this.uppy.emit('preprocess-complete', file)\n        })\n        return assembly\n      } catch (err)  {\n        fileIDs.forEach((fileID) => {\n          const file = this.uppy.getFile(fileID)\n          // Clear preprocessing state when the Assembly could not be created,\n          // otherwise the UI gets confused about the lingering progress keys\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      }\n    }\n\n    const { uploadsAssemblies } = this.getPluginState()\n    this.setPluginState({\n      uploadsAssemblies: {\n        ...uploadsAssemblies,\n        [uploadID]: [],\n      },\n    })\n\n    const assemblyOptions = new AssemblyOptions(filesWithoutErrors, this.opts)\n\n    return assemblyOptions.build()\n      .then((assemblies) => Promise.all(assemblies.map(createAssembly)))\n      .then((maybeCreatedAssemblies) => {\n        const createdAssemblies = maybeCreatedAssemblies.filter(Boolean)\n        const assemblyIDs = createdAssemblies.map(assembly => assembly.status.assembly_id)\n        this.#createAssemblyWatcher(assemblyIDs, uploadID)\n        return Promise.all(createdAssemblies.map(assembly => this.#connectAssembly(assembly)))\n      })\n      // If something went wrong before any Assemblies could be created,\n      // clear all processing state.\n      .catch((err) => {\n        filesWithoutErrors.forEach((file) => {\n          this.uppy.emit('preprocess-complete', file)\n          this.uppy.emit('upload-error', file, err)\n        })\n        throw err\n      })\n  }\n\n  #afterUpload = (fileIDs, uploadID) => {\n    const files = fileIDs.map(fileID => this.uppy.getFile(fileID))\n    // Only use files without errors\n    const filteredFileIDs = files.filter((file) => !file.error).map(file => file.id)\n\n    const state = this.getPluginState()\n\n    // If we're still restoring state, wait for that to be done.\n    if (this.restored) {\n      return this.restored.then(() => {\n        return this.#afterUpload(filteredFileIDs, uploadID)\n      })\n    }\n\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n\n    const closeSocketConnections = () => {\n      assemblyIDs.forEach((assemblyID) => {\n        const assembly = this.activeAssemblies[assemblyID]\n        assembly.close()\n        delete this.activeAssemblies[assemblyID]\n      })\n    }\n\n    // If we don't have to wait for encoding metadata or results, we can close\n    // the socket immediately and finish the upload.\n    if (!this.#shouldWaitAfterUpload()) {\n      closeSocketConnections()\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n      this.uppy.addResultData(uploadID, { transloadit: assemblies })\n      return Promise.resolve()\n    }\n\n    // If no Assemblies were created for this upload, we also do not have to wait.\n    // There's also no sockets or anything to close, so just return immediately.\n    if (assemblyIDs.length === 0) {\n      this.uppy.addResultData(uploadID, { transloadit: [] })\n      return Promise.resolve()\n    }\n\n    const incompleteFiles = files.filter(file => !hasProperty(this.completedFiles, file.id))\n    incompleteFiles.forEach((file) => {\n      this.uppy.emit('postprocess-progress', file, {\n        mode: 'indeterminate',\n        message: this.i18n('encoding'),\n      })\n    })\n\n    const watcher = this.assemblyWatchers[uploadID]\n    return watcher.promise.then(() => {\n      closeSocketConnections()\n\n      const assemblies = assemblyIDs.map((id) => this.getAssembly(id))\n\n      // Remove the Assembly ID list for this upload,\n      // it's no longer going to be used anywhere.\n      const uploadsAssemblies = { ...this.getPluginState().uploadsAssemblies }\n      delete uploadsAssemblies[uploadID]\n      this.setPluginState({ uploadsAssemblies })\n\n      this.uppy.addResultData(uploadID, {\n        transloadit: assemblies,\n      })\n    })\n  }\n\n  #closeAssemblyIfExists = (assemblyID) => {\n    this.activeAssemblies[assemblyID]?.close()\n  }\n\n  #onError = (err = null, uploadID) => {\n    const state = this.getPluginState()\n    const assemblyIDs = state.uploadsAssemblies[uploadID]\n    assemblyIDs?.forEach(this.#closeAssemblyIfExists)\n\n    this.client.submitError(err)\n      // if we can't report the error that sucks\n      .catch(sendErrorToConsole(err))\n  }\n\n  #onTusError = (file, err) => {\n    this.#closeAssemblyIfExists(file?.transloadit?.assembly)\n    if (err?.message?.startsWith('tus: ')) {\n      const endpoint = err.originalRequest?.getUnderlyingObject()?.responseURL\n      this.client.submitError(err, { endpoint, type: 'TUS_ERROR' })\n        // if we can't report the error that sucks\n        .catch(sendErrorToConsole(err))\n    }\n  }\n\n  install () {\n    this.uppy.addPreProcessor(this.#prepareUpload)\n    this.uppy.addPostProcessor(this.#afterUpload)\n\n    // We may need to close socket.io connections on error.\n    this.uppy.on('error', this.#onError)\n\n    // Handle cancellation.\n    this.uppy.on('cancel-all', this.#onCancelAll)\n\n    // For error reporting.\n    this.uppy.on('upload-error', this.#onTusError)\n\n    if (this.opts.importFromUploadURLs) {\n      // No uploader needed when importing; instead we take the upload URL from an existing uploader.\n      this.uppy.on('upload-success', this.#onFileUploadURLAvailable)\n    } else {\n      this.uppy.use(Tus, {\n        // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times\n        // will upload to an outdated Assembly, and we won't get socket events for it.\n        //\n        // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's\n        // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,\n        // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that\n        // were added to the Assembly, so we can properly complete it. All that state is handled by\n        // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,\n        // and we disable Tus's default resume implementation to prevent bad behaviours.\n        storeFingerprintForResuming: false,\n        // Only send Assembly metadata to the tus endpoint.\n        allowedMetaFields: ['assembly_url', 'filename', 'fieldname'],\n        // Pass the limit option to @uppy/tus\n        limit: this.opts.limit,\n        rateLimitedQueue: this.#rateLimitedQueue,\n        retryDelays: this.opts.retryDelays,\n      })\n    }\n\n    this.uppy.on('restore:get-data', this.#getPersistentData)\n    this.uppy.on('restored', this.#onRestored)\n\n    this.setPluginState({\n      // Contains Assembly status objects, indexed by their ID.\n      assemblies: {},\n      // Contains arrays of Assembly IDs, indexed by the upload ID that they belong to.\n      uploadsAssemblies: {},\n      // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.\n      files: {},\n      // Contains result data from Transloadit.\n      results: [],\n    })\n\n    // We cannot cancel individual files because Assemblies tend to contain many files.\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: false,\n      },\n    })\n  }\n\n  uninstall () {\n    this.uppy.removePreProcessor(this.#prepareUpload)\n    this.uppy.removePostProcessor(this.#afterUpload)\n    this.uppy.off('error', this.#onError)\n\n    if (this.opts.importFromUploadURLs) {\n      this.uppy.off('upload-success', this.#onFileUploadURLAvailable)\n    }\n\n    const { capabilities } = this.uppy.getState()\n    this.uppy.setState({\n      capabilities: {\n        ...capabilities,\n        individualCancellation: true,\n      },\n    })\n  }\n\n  getAssembly (id) {\n    const { assemblies } = this.getPluginState()\n    return assemblies[id]\n  }\n\n  getAssemblyFiles (assemblyID) {\n    return this.uppy.getFiles().filter((file) => {\n      return file?.transloadit?.assembly === assemblyID\n    })\n  }\n}\n\nexport {\n  COMPANION_URL,\n  COMPANION_ALLOWED_HOSTS,\n}\n"],"mappings":"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"}